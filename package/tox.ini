; [tox]
; envlist = scania_truck
; skip_missing_interpreters = true
; skipsdist = True

; [testenv]
; install_command = pip install {opts} {packages}
; commands =
;   pytest -s tests/
; deps =
;   pytest

; setenv = 
;   PYTHONPATH=.

; [tox]
; # Choose your Python versions. They have to be available
; # on the system the tests are run on.
; envlist = scania, lint
; skip_missing_interpreters = true

; [testenv]
; install_command= pip install {opts} {packages}
; [testenv:scania]
; deps =
;     -rrequirements.txt
; setenv = 
;   PYTHONPATH=.
;   PYTHONHASHSEED=0
; commands = 
;     python --version
;     #python -c "from scania_truc import __version__; print(__version__)"
;     pytest -s -vv {posargstests/} -m "not smoke" --cov=scania_truck --cov-report term --cov-append
; description = run unittests

; depends =
;     scania: clean
;     report: scania


; [testenv:report]
; commands =
;     coverage report
;     coverage html
; deps = coverage
; skip_install = true

; [testenv:clean]
; commands = coverage erase
; deps = coverage
; skip_install = true

; ; [testenv:flake8]
; ; commands =
; ; print('hiii')
; ; ;     #flake8 scania_truck
; ; ;     flake8 setup.py
; ; deps =
; ;     flake8
; ; skip_install = true

; [testenv:pylint]
; commands =
;     pylint-fail-under --fail_under 9.80 scania_truck setup.py
; deps =
;     -rrequirements.txt
;     pylint
;     pylint-fail-under

; [testenv:lint]
; deps =
;     #{[testenv:flake8]deps}
;     {[testenv:pylint]deps}
; commands =
;     #{[testenv:flake8]commands}
;     {[testenv:pylint]commands}


[tox]
envlist = test_package, typechecks, stylechecks, lint
skipsdist = True

[testenv]
install_command = pip install {opts} {packages}

[testenv:test_package]
deps =
	-rrequirements.txt

depends =
    scania: clean
    report: scania

setenv =
	PYTHONPATH=.
	PYTHONHASHSEED=0

commands=
	pytest \
	-s \
	-vv \
	{posargs:tests/} \
  -m "not smoke" \
  --cov=scania_truck \
  --cov-report term \
  --cov-append

[testenv:report]
commands =
    coverage report
    coverage html
deps = coverage
skip_install = true

[testenv:clean]
commands = coverage erase
deps = coverage
skip_install = true

; [testenv:train]
; envdir = {toxworkdir}/test_package
; deps =
; 	{[testenv:test_package]deps}

; setenv =
; 	{[testenv:test_package]setenv}

; commands=
; 	python regression_model/train_pipeline.py


[testenv:typechecks]
envdir = {toxworkdir}/test_package

deps =
	{[testenv:test_package]deps}

commands = {posargs:mypy scania_truck}


[testenv:stylechecks]
envdir = {toxworkdir}/test_package

deps =
	{[testenv:test_package]deps}

commands = {posargs:flake8 scania_truck tests}


[testenv:lint]
envdir = {toxworkdir}/test_package

deps =
	{[testenv:test_package]deps}

commands =
	isort  scania_truck tests
	black scania_truck tests
	mypy scania_truck
  flake8 scania_truck

[flake8]
ignore = W605,E302,E41, W503, F401
exclude = .git,env
max-line-length = 90